<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>盘古开天</title>
  
  <subtitle>天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。W人生当苦无妨，良人当归即可。W有些事，不是不在意，而是在意了又能怎样。自己尽力了就好，人生没有如果，只有后果和结果。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tangbaohua1.github.io/"/>
  <updated>2018-07-27T07:20:01.181Z</updated>
  <id>https://tangbaohua1.github.io/</id>
  
  <author>
    <name>Tang Baohua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JDK各个版本的新特性</title>
    <link href="https://tangbaohua1.github.io/2018/07/27/JDK%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://tangbaohua1.github.io/2018/07/27/JDK各个版本的新特性/</id>
    <published>2018-07-27T07:17:49.000Z</published>
    <updated>2018-07-27T07:20:01.181Z</updated>
    
    <content type="html"><![CDATA[<ul><li>对于很多刚接触java语言的初学者来说，要了解一门语言，最好的方式就是要能从基础的版本进行了解，升级的过程，以及升级的新特性，这样才能循序渐进的学好一门语言。今天先为大家介绍一下JDK1.5版本到JDK1.7版本的特性。希望能给予帮助。</li></ul><a id="more"></a><h2 id="jdk15新特性"><a class="markdownIt-Anchor" href="#jdk15新特性"></a> JDK1.5新特性：</h2><h3 id="1自动装箱与拆箱"><a class="markdownIt-Anchor" href="#1自动装箱与拆箱"></a> 1.自动装箱与拆箱：</h3><p>自动装箱的过程：每当需要一种类型的对象时，这种基本类型就自动地封装到与它相同类型的包装中。</p><p>自动拆箱的过程：每当需要一个值时，被装箱对象中的值就被自动地提取出来，没必要再去调用<code>intValue()</code>和<code>doubleValue()</code>方法。</p><p>自动装箱，只需将该值赋给一个类型包装器引用，java会自动创建一个对象。</p><p>自动拆箱，只需将该对象值赋给一个基本类型即可。</p><p>java——类的包装器</p><p>类型包装器有：<code>Double</code>,<code>Float</code>,<code>Long</code>,<code>Integer</code>,<code>Short</code>,<code>Character</code>和<code>Boolean</code></p><h3 id="2枚举"><a class="markdownIt-Anchor" href="#2枚举"></a> 2.枚举</h3><p>把集合里的对象元素一个一个提取出来。枚举类型使代码更具可读性，理解清晰，易于维护。枚举类型是强类型的，从而保证了系统安全性。而以类的静态字段实现的类似替代模型，不具有枚举的简单性和类型安全性。</p><p>简单的用法：JavaEnum简单的用法一般用于代表一组常用常量，可用来代表一类相同类型的常量值。</p><p>复杂用法：Java为枚举类型提供了一些内置的方法，同事枚举常量还可以有自己的方法。可以很方便的遍历枚举对象。</p><h3 id="3静态导入"><a class="markdownIt-Anchor" href="#3静态导入"></a> 3.静态导入</h3><p>通过使用 import static，就可以不用指定 Constants 类名而直接使用静态成员，包括静态方法。</p><p><code>import</code> xxxx 和 <code>import static</code> xxxx的区别是前者一般导入的是类文件如<code>import java.util.Scanner</code>;后者一般是导入静态的方法，<code>import static java.lang.System.out</code>。</p><h3 id="4可变参数varargs"><a class="markdownIt-Anchor" href="#4可变参数varargs"></a> 4.可变参数（Varargs）</h3><p>可变参数的简单语法格式为：</p><p>methodName([argumentList], dataType…argumentName);</p><h3 id="5内省introspector"><a class="markdownIt-Anchor" href="#5内省introspector"></a> 5.内省（Introspector）</h3><p>是 Java语言对Bean类属性、事件的一种缺省处理方法。例如类A中有属性name,那我们可以通过getName,setName来得到其值或者设置新 的值。通过getName/setName来访问name属性，这就是默认的规则。Java中提供了一套API用来访问某个属性的getter /setter方法，通过这些API可以使你不需要了解这个规则（但你最好还是要搞清楚），这些API存放于包java.beans中。</p><p>一 般的做法是通过类Introspector来获取某个对象的BeanInfo信息，然后通过BeanInfo来获取属性的描述器 （PropertyDescriptor），通过这个属性描述器就可以获取某个属性对应的getter/setter方法，然后我们就可以通过反射机制来 调用这些方法。</p><h3 id="6泛型generic"><a class="markdownIt-Anchor" href="#6泛型generic"></a> 6.泛型(Generic)</h3><p>C++ 通过模板技术可以指定集合的元素类型，而Java在1.5之前一直没有相对应的功能。一个集合可以放任何类型的对象，相应地从集合里面拿对象的时候我们也 不得不对他们进行强制得类型转换。猛虎引入了泛型，它允许指定集合里元素的类型，这样你可以得到强类型在编译时刻进行类型检查的好处。</p><h3 id="7for-each循环"><a class="markdownIt-Anchor" href="#7for-each循环"></a> 7.For-Each循环</h3><p>For-Each循环得加入简化了集合的遍历。假设我们要遍历一个集合对其中的元素进行一些处理。</p><h2 id="jdk-16新特性"><a class="markdownIt-Anchor" href="#jdk-16新特性"></a> JDK 1.6新特性</h2><h3 id="1desktop类和systemtray类"><a class="markdownIt-Anchor" href="#1desktop类和systemtray类"></a> 1.Desktop类和SystemTray类</h3><p>在JDK6中 ,AWT新增加了两个类:<code>Desktop</code>和<code>SystemTray</code>。</p><p>前者可以用来打开系统默认浏览器浏览指定的URL,打开系统默认邮件客户端给指定的邮箱发邮件,用默认应用程序打开或编辑文件(比如,用记事本打开以txt为后缀名的文件),用系统默认的打印机打印文档;后者可以用来在系统托盘区创建一个托盘程序.</p><h3 id="2使用jaxb2来实现对象与xml之间的映射"><a class="markdownIt-Anchor" href="#2使用jaxb2来实现对象与xml之间的映射"></a> 2.使用JAXB2来实现对象与XML之间的映射</h3><p>JAXB是Java Architecture for XML Binding的缩写，可以将一个Java对象转变成为XML格式，反之亦然。</p><p>我 们把对象与关系数据库之间的映射称为ORM, 其实也可以把对象与XML之间的映射称为OXM(Object XML Mapping). 原来JAXB是Java EE的一部分，在JDK6中，SUN将其放到了Java SE中，这也是SUN的一贯做法。JDK6中自带的这个JAXB版本是2.0, 比起1.0(JSR 31)来，JAXB2(JSR 222)用JDK5的新特性Annotation来标识要作绑定的类和属性等，这就极大简化了开发的工作量。</p><p>实 际上，在Java EE 5.0中，EJB和Web Services也通过Annotation来简化开发工作。另外,JAXB2在底层是用StAX(JSR 173)来处理XML文档。除了JAXB之外，我们还可以通过XMLBeans和Castor等来实现同样的功能。</p><h3 id="3理解stax"><a class="markdownIt-Anchor" href="#3理解stax"></a> 3.理解StAX</h3><p>StAX(JSR 173)是JDK6.0中除了DOM和SAX之外的又一种处理XML文档的API。</p><p>StAX 的来历 ：在JAXP1.3(JSR 206)有两种处理XML文档的方法:<code>DOM</code>(Document Object Model)和<code>SAX</code>(Simple API for XML).</p><p>由 于JDK6.0中的JAXB2(JSR 222)和JAX-WS 2.0(JSR 224)都会用到StAX所以Sun决定把StAX加入到JAXP家族当中来，并将JAXP的版本升级到1.4(JAXP1.4是JAXP1.3的维护版 本). JDK6里面JAXP的版本就是1.4. 。</p><p>StAX是The Streaming API for XML的缩写，一种利用拉模式解析(pull-parsing)XML文档的API.StAX通过提供一种基于事件迭代器(Iterator)的API让 程序员去控制xml文档解析过程,程序遍历这个事件迭代器去处理每一个解析事件，解析事件可以看做是程序拉出来的，也就是程序促使解析器产生一个解析事件 然后处理该事件，之后又促使解析器产生下一个解析事件，如此循环直到碰到文档结束符；</p><p>SAX也是基于事件处理xml文档，但却 是用推模式解析，解析器解析完整个xml文档后，才产生解析事件，然后推给程序去处理这些事件；DOM 采用的方式是将整个xml文档映射到一颗内存树，这样就可以很容易地得到父节点和子结点以及兄弟节点的数据，但如果文档很大，将会严重影响性能。</p><h3 id="4使用compiler-api"><a class="markdownIt-Anchor" href="#4使用compiler-api"></a> 4.使用Compiler API</h3><p>现在我 们可以用JDK6 的Compiler API(JSR 199)去动态编译Java源文件，Compiler API结合反射功能就可以实现动态的产生Java代码并编译执行这些代码，有点动态语言的特征。</p><p>这 个特性对于某些需要用到动态编译的应用程序相当有用， 比如JSP Web Server，当我们手动修改JSP后，是不希望需要重启Web Server才可以看到效果的，这时候我们就可以用Compiler API来实现动态编译JSP文件，当然，现在的JSP Web Server也是支持JSP热部署的，现在的JSP Web Server通过在运行期间通过Runtime.exec或ProcessBuilder来调用javac来编译代码，这种方式需要我们产生另一个进程去 做编译工作，不够优雅而且容易使代码依赖与特定的操作系统；Compiler API通过一套易用的标准的API提供了更加丰富的方式去做动态编译,而且是跨平台的。</p><h3 id="5轻量级http-server-api"><a class="markdownIt-Anchor" href="#5轻量级http-server-api"></a> 5.轻量级Http Server API</h3><p>JDK6 提供了一个简单的Http Server API,据此我们可以构建自己的嵌入式Http Server,它支持Http和Https协议,提供了HTTP1.1的部分实现，没有被实现的那部分可以通过扩展已有的Http Server API来实现,程序员必须自己实现HttpHandler接口,HttpServer会调用HttpHandler实现类的回调方法来处理客户端请求,在 这里,我们把一个Http请求和它的响应称为一个交换,包装成HttpExchange类,HttpServer负责将HttpExchange传给 HttpHandler实现类的回调方法.</p><h3 id="6插入式注解处理apipluggable-annotation-processing-api"><a class="markdownIt-Anchor" href="#6插入式注解处理apipluggable-annotation-processing-api"></a> 6.插入式注解处理API(Pluggable Annotation Processing API)</h3><p>插入式注解处理API(JSR 269)提供一套标准API来处理Annotations(JSR 175)</p><p>实际上JSR 269不仅仅用来处理Annotation,我觉得更强大的功能是它建立了Java 语言本身的一个模型,它把method, package, constructor, type, variable, enum, annotation等Java语言元素映射为Types和Elements(两者有什么区别?), 从而将Java语言的语义映射成为对象, 我们可以在javax.lang.model包下面可以看到这些类. 所以我们可以利用JSR 269提供的API来构建一个功能丰富的元编程(metaprogramming)环境.</p><p>JSR 269用Annotation Processor在编译期间而不是运行期间处理Annotation, Annotation Processor相当于编译器的一个插件,所以称为插入式注解处理.如果Annotation Processor处理Annotation时(执行process方法)产生了新的Java代码,编译器会再调用一次Annotation Processor,如果第二次处理还有新代码产生,就会接着调用Annotation Processor,直到没有新代码产生为止.每执行一次process()方法被称为一个&quot;round&quot;,这样整个Annotation processing过程可以看作是一个round的序列.</p><p>JSR 269主要被设计成为针对Tools或者容器的API. 举个例子,我们想建立一套基于Annotation的单元测试框架(如TestNG),在测试类里面用Annotation来标识测试期间需要执行的测试方法。</p><h3 id="7用console开发控制台程序"><a class="markdownIt-Anchor" href="#7用console开发控制台程序"></a> 7.用Console开发控制台程序</h3><p>JDK6 中提供了java.io.Console 类专用来访问基于字符的控制台设备. 你的程序如果要与Windows下的cmd或者Linux下的Terminal交互,就可以用Console类代劳. 但我们不总是能得到可用的Console, 一个JVM是否有可用的Console依赖于底层平台和JVM如何被调用. 如果JVM是在交互式命令行(比如Windows的cmd)中启动的,并且输入输出没有重定向到另外的地方,那么就可以得到一个可用的Console实例.</p><h3 id="8对脚本语言的支持"><a class="markdownIt-Anchor" href="#8对脚本语言的支持"></a> 8.对脚本语言的支持</h3><p>对脚本语言的支持如: ruby, groovy, javascript.</p><h3 id="9common-annotations"><a class="markdownIt-Anchor" href="#9common-annotations"></a> 9.Common Annotations</h3><p>Common annotations原本是Java EE 5.0(JSR 244)规范的一部分，现在SUN把它的一部分放到了Java SE 6.0中.</p><p>随 着Annotation元数据功能(JSR 175)加入到Java SE 5.0里面，很多Java 技术(比如EJB,Web Services)都会用Annotation部分代替XML文件来配置运行参数（或者说是支持声明式编程,如EJB的声明式事务）, 如果这些技术为通用目的都单独定义了自己的Annotations,显然有点重复建设, 所以,为其他相关的Java技术定义一套公共的Annotation是有价值的，可以避免重复建设的同时，也保证Java SE和Java EE 各种技术的一致性.</p><p>下面列举出Common Annotations 1.0里面的10个Annotations Common Annotations</p><p>Annotation Retention Target Description</p><p>Generated Source ANNOTATION_TYPE, CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE 用于标注生成的源代码</p><p>Resource Runtime TYPE, METHOD, FIELD 用于标注所依赖的资源,容器据此注入外部资源依赖，有基于字段的注入和基于setter方法的注入两种方式</p><p>Resources Runtime TYPE 同时标注多个外部依赖，容器会把所有这些外部依赖注入</p><p>PostConstruct Runtime METHOD 标注当容器注入所有依赖之后运行的方法，用来进行依赖注入后的初始化工作，只有一个方法可以标注为PostConstruct</p><p>PreDestroy Runtime METHOD 当对象实例将要被从容器当中删掉之前，要执行的回调方法要标注为PreDestroy RunAs Runtime TYPE 用于标注用什么安全角色来执行被标注类的方法，这个安全角色必须和Container 的Security角色一致的。RolesAllowed Runtime TYPE, METHOD 用于标注允许执行被标注类或方法的安全角色，这个安全角色必须和Container 的Security角色一致的</p><p>PermitAll Runtime TYPE, METHOD 允许所有角色执行被标注的类或方法</p><p>DenyAll Runtime TYPE, METHOD 不允许任何角色执行被标注的类或方法，表明该类或方法不能在Java EE容器里面运行</p><p>DeclareRoles Runtime TYPE 用来定义可以被应用程序检验的安全角色，通常用isUserInRole来检验安全角色</p><p>注意:</p><ol><li><p>RolesAllowed,PermitAll,DenyAll不能同时应用到一个类或方法上</p></li><li><p>标注在方法上的RolesAllowed,PermitAll,DenyAll会覆盖标注在类上的RolesAllowed,PermitAll,DenyAll</p></li><li><p>RunAs,RolesAllowed,PermitAll,DenyAll和DeclareRoles还没有加到Java SE 6.0上来</p></li><li><p>处理以上Annotations的工作是由Java EE容器来做, Java SE 6.0只是包含了上面表格的前五种Annotations的定义类,并没有包含处理这些Annotations的引擎,这个工作可以由Pluggable Annotation Processing API(JSR 269)来做</p></li></ol><p>改动的地方最大的就是java GUI界面的显示了，JDK6.0（也就是JDK1.6）支持最新的windows vista系统的Windows Aero视窗效果，而JDK1.5不支持！！！</p><p>你要在vista环境下编程的话最好装jdk6.0，否则它总是换到windows basic视窗效果.</p><h2 id="jdk-17-新特性"><a class="markdownIt-Anchor" href="#jdk-17-新特性"></a> JDK 1.7 新特性</h2><h3 id="1switch中可以使用字串了"><a class="markdownIt-Anchor" href="#1switch中可以使用字串了"></a> 1.switch中可以使用字串了</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"test"</span>;</span><br><span class="line"><span class="keyword">switch</span> (s) &#123;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">"test"</span> :</span><br><span class="line">   System.out.println(<span class="string">"test"</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="string">"test1"</span> :</span><br><span class="line">   System.out.println(<span class="string">"test1"</span>);</span><br><span class="line"><span class="keyword">break</span> ;</span><br><span class="line"><span class="keyword">default</span> :</span><br><span class="line">  System.out.println(<span class="string">"break"</span>);</span><br><span class="line"><span class="keyword">break</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2这个玩意儿的运用liststring-templist-new-arraylist-即泛型实例化类型自动推断"><a class="markdownIt-Anchor" href="#2这个玩意儿的运用liststring-templist-new-arraylist-即泛型实例化类型自动推断"></a> 2.&quot;&lt;&gt;&quot;这个玩意儿的运用List<string> tempList = new ArrayList&lt;&gt;(); 即泛型实例化类型自动推断。</string></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mport java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDK7GenericTest</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Pre-JDK 7</span></span><br><span class="line">      List&lt;String&gt; lst1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">      <span class="comment">// JDK 7 supports limited type inference for generic instance creation</span></span><br><span class="line">      List&lt;String&gt; lst2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">      lst1.add(<span class="string">"Mon"</span>);</span><br><span class="line">      lst1.add(<span class="string">"Tue"</span>);</span><br><span class="line">      lst2.add(<span class="string">"Wed"</span>);</span><br><span class="line">      lst2.add(<span class="string">"Thu"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span> (String item: lst1) &#123;</span><br><span class="line">         System.out.println(item);</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span> (String item: lst2) &#123;</span><br><span class="line">         System.out.println(item);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-自定义自动关闭类"><a class="markdownIt-Anchor" href="#3-自定义自动关闭类"></a> 3. 自定义自动关闭类</h3><p>以下是jdk7 api中的接口，（不过注释太长，删掉了close()方法的一部分注释）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A resource that must be closed when it is no longer needed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Josh Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Closes this resource, relinquishing any underlying resources.</span></span><br><span class="line"><span class="comment">     * This method is invoked automatically on objects managed by the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> try&#125;-with-resources statement.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要实现该接口，在该类对象销毁时自动调用close方法，你可以在close方法关闭你想关闭的资源，例子如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TryClose</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> throw Exception </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">" Custom close method …</span></span><br><span class="line"><span class="string">                                         close resources "</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请看jdk自带类BufferedReader如何实现close方法（当然还有很多类似类型的类）</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (in == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            in.close();</span><br><span class="line">            in = <span class="keyword">null</span>;</span><br><span class="line">            cb = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-新增一些取环境信息的工具方法"><a class="markdownIt-Anchor" href="#4-新增一些取环境信息的工具方法"></a> 4. 新增一些取环境信息的工具方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">File System.getJavaIoTempDir() <span class="comment">// IO临时文件夹</span></span><br><span class="line"></span><br><span class="line">File System.getJavaHomeDir() <span class="comment">// JRE的安装目录</span></span><br><span class="line"></span><br><span class="line">File System.getUserHomeDir() <span class="comment">// 当前用户目录</span></span><br><span class="line"></span><br><span class="line">File System.getUserDir() <span class="comment">// 启动java进程时所在的目录</span></span><br><span class="line"></span><br><span class="line">.......</span><br></pre></td></tr></table></figure><h3 id="5-boolean类型反转空指针安全参与位运算"><a class="markdownIt-Anchor" href="#5-boolean类型反转空指针安全参与位运算"></a> 5. Boolean类型反转，空指针安全,参与位运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Boolean Booleans.negate(Boolean booleanObj)</span><br><span class="line"></span><br><span class="line">True =&gt; False , False =&gt; True, Null =&gt; Null</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> Booleans.and(<span class="keyword">boolean</span>[] array)</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> Booleans.or(<span class="keyword">boolean</span>[] array)</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> Booleans.xor(<span class="keyword">boolean</span>[] array)</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> Booleans.and(Boolean[] array)</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> Booleans.or(Boolean[] array)</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> Booleans.xor(Boolean[] array)</span><br></pre></td></tr></table></figure><h3 id="6-两个char间的equals"><a class="markdownIt-Anchor" href="#6-两个char间的equals"></a> 6. 两个char间的equals</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> Character.equalsIgnoreCase(<span class="keyword">char</span> ch1, <span class="keyword">char</span> ch2)</span><br></pre></td></tr></table></figure><h3 id="7安全的加减乘除"><a class="markdownIt-Anchor" href="#7安全的加减乘除"></a> 7.安全的加减乘除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Math.safeToInt(<span class="keyword">long</span> value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Math.safeNegate(<span class="keyword">int</span> value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> Math.safeSubtract(<span class="keyword">long</span> value1, <span class="keyword">int</span> value2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> Math.safeSubtract(<span class="keyword">long</span> value1, <span class="keyword">long</span> value2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Math.safeMultiply(<span class="keyword">int</span> value1, <span class="keyword">int</span> value2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> Math.safeMultiply(<span class="keyword">long</span> value1, <span class="keyword">int</span> value2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> Math.safeMultiply(<span class="keyword">long</span> value1, <span class="keyword">long</span> value2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> Math.safeNegate(<span class="keyword">long</span> value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Math.safeAdd(<span class="keyword">int</span> value1, <span class="keyword">int</span> value2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> Math.safeAdd(<span class="keyword">long</span> value1, <span class="keyword">int</span> value2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> Math.safeAdd(<span class="keyword">long</span> value1, <span class="keyword">long</span> value2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Math.safeSubtract(<span class="keyword">int</span> value1, <span class="keyword">int</span> value2)</span><br></pre></td></tr></table></figure><h3 id="8对java集合collections的增强支持"><a class="markdownIt-Anchor" href="#8对java集合collections的增强支持"></a> 8.对Java集合（Collections）的增强支持</h3><p>在JDK1.7之前的版本中，Java集合容器中存取元素的形式如下：</p><p>以List、Set、Map集合容器为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建List接口对象</span></span><br><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">"item"</span>); <span class="comment">//用add()方法获取对象</span></span><br><span class="line">String Item=list.get(<span class="number">0</span>); <span class="comment">//用get()方法获取对象</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Set接口对象</span></span><br><span class="line">Set&lt;String&gt; set=<span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">set.add(<span class="string">"item"</span>); <span class="comment">//用add()方法添加对象 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Map接口对象</span></span><br><span class="line">Map&lt;String,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;String,Integer&gt;();</span><br><span class="line">map.put(<span class="string">"key"</span>,<span class="number">1</span>); <span class="comment">//用put()方法添加对象</span></span><br><span class="line"><span class="keyword">int</span> value=map.get(<span class="string">"key"</span>);</span><br></pre></td></tr></table></figure><p>在JDK1.7中，摒弃了Java集合接口的实现类，如：ArrayList、HashSet和HashMap。而是直接采用[]、{}的形式存入对象，采用[]的形式按照索引、键值来获取集合中的对象，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list=[<span class="string">"item"</span>]; <span class="comment">//向List集合中添加元素</span></span><br><span class="line">     String item=list[<span class="number">0</span>]; <span class="comment">//从List集合中获取元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     Set&lt;String&gt; set=&#123;<span class="string">"item"</span>&#125;; <span class="comment">//向Set集合对象中添加元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     Map&lt;String,Integer&gt; map=&#123;<span class="string">"key"</span>:<span class="number">1</span>&#125;; <span class="comment">//向Map集合中添加对象</span></span><br><span class="line">     <span class="keyword">int</span> value=map[<span class="string">"key"</span>]; <span class="comment">//从Map集合中获取对象</span></span><br></pre></td></tr></table></figure><h3 id="9数值可加下划线支持二进制文字"><a class="markdownIt-Anchor" href="#9数值可加下划线支持二进制文字"></a> 9.数值可加下划线&amp;&amp;支持二进制文字</h3><p>例如：<code>int one_million = 1_000_000; //数值可加下划线</code><br>例如：<code>int binary = 0b1001_1001; //支持二进制文字</code></p><h3 id="10简化了可变参数方法的调用"><a class="markdownIt-Anchor" href="#10简化了可变参数方法的调用"></a> 10.简化了可变参数方法的调用</h3><p>当程序员试图使用一个不可具体化的可变参数并调用一个<code>*varargs*</code> （可变）方法时，编辑器会生成一个“非安全操作”的警告。</p><h3 id="11在try-catch异常扑捉中一个catch可以写多个异常类型用隔开"><a class="markdownIt-Anchor" href="#11在try-catch异常扑捉中一个catch可以写多个异常类型用隔开"></a> 11.在try catch异常扑捉中，一个catch可以写多个异常类型，用&quot;|&quot;隔开</h3><p>jdk7之前：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   ......</span><br><span class="line">&#125; <span class="keyword">catch</span>(ClassNotFoundException ex) &#123;</span><br><span class="line">   ex.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span>(SQLException ex) &#123;</span><br><span class="line">   ex.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jdk7例子如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   ......</span><br><span class="line">&#125; <span class="keyword">catch</span>(ClassNotFoundException|SQLException ex) &#123;</span><br><span class="line">   ex.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12jdk7之前你必须用tryfinally在try内使用资源在finally中关闭资源不管try中的代码是否正常退出或者异常退出-jdk7之后你可以不必要写finally语句来关闭资源只要你在try的括号内部定义要使用的资源-请看例子"><a class="markdownIt-Anchor" href="#12jdk7之前你必须用tryfinally在try内使用资源在finally中关闭资源不管try中的代码是否正常退出或者异常退出-jdk7之后你可以不必要写finally语句来关闭资源只要你在try的括号内部定义要使用的资源-请看例子"></a> 12.jdk7之前，你必须用try{}finally{}在try内使用资源，在finally中关闭资源，不管try中的代码是否正常退出或者异常退出。jdk7之后，你可以不必要写finally语句来关闭资源，只要你在try()的括号内部定义要使用的资源。请看例子：</h3><p>jdk7之前:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">// Copy from one file to another file character by character.</span></span><br><span class="line"><span class="comment">// Pre-JDK 7 requires you to close the resources using a finally block.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCopyPreJDK7</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">      BufferedWriter out = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         in  = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"in.txt"</span>));</span><br><span class="line">         out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"out.txt"</span>));</span><br><span class="line">         <span class="keyword">int</span> charRead;</span><br><span class="line">         <span class="keyword">while</span> ((charRead = in.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"%c "</span>, (<span class="keyword">char</span>)charRead);</span><br><span class="line">            out.write(charRead);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">         ex.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;            <span class="comment">// always close the streams</span></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>) in.close();</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) out.close();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         in.read();   <span class="comment">// Trigger IOException: Stream closed</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">         ex.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jdk7之后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">// Copy from one file to another file character by character.</span></span><br><span class="line"><span class="comment">// JDK 7 has a try-with-resources statement, which ensures that</span></span><br><span class="line"><span class="comment">// each resource opened in try() is closed at the end of the statement.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCopyJDK7</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> (BufferedReader in  = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"in.txt"</span>));</span><br><span class="line">           BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"out.txt"</span>))) &#123;</span><br><span class="line">         <span class="keyword">int</span> charRead;</span><br><span class="line">         <span class="keyword">while</span> ((charRead = in.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"%c "</span>, (<span class="keyword">char</span>)charRead);</span><br><span class="line">            out.write(charRead);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">         ex.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jdk-18-新特性"><a class="markdownIt-Anchor" href="#jdk-18-新特性"></a> JDK 1.8 新特性</h2><h3 id="1接口的默认方法"><a class="markdownIt-Anchor" href="#1接口的默认方法"></a> 1.接口的默认方法</h3><p>Java 8允许我们给接口添加一个非抽象的方法实现，只需要使用 default关键字即可，这个特征又叫做扩展方法，示例如下：</p><p>代码如下:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Formula</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a)</span></span>; </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Formula接口在拥有calculate方法之外同时还定义了sqrt方法，实现了Formula接口的子类只需要实现一个calculate方法，默认方法sqrt将在子类上可以直接使用。</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Formula formula = <span class="keyword">new</span> Formula() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqrt(a * <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; </span><br><span class="line">formula.calculate(<span class="number">100</span>);     <span class="comment">// 100.0</span></span><br><span class="line">formula.sqrt(<span class="number">16</span>);           <span class="comment">// 4.0</span></span><br></pre></td></tr></table></figure><p>文中的formula被实现为一个匿名类的实例，该代码非常容易理解，6行代码实现了计算 sqrt(a * 100)。在下一节中，我们将会看到实现单方法接口的更简单的做法。<br>译者注： 在Java中只有单继承，如果要让一个类赋予新的特性，通常是使用接口来实现，在C++中支持多继承，允许一个子类同时具有多个父类的接口与功能，在其他 语言中，让一个类同时具有其他的可复用代码的方法叫做mixin。新的Java 8 的这个特新在编译器实现的角度上来说更加接近Scala的trait。 在C#中也有名为扩展方法的概念，允许给已存在的类型扩展方法，和Java 8的这个在语义上有差别。</p><h3 id="2lambda-表达式"><a class="markdownIt-Anchor" href="#2lambda-表达式"></a> 2.Lambda 表达式</h3><p>首先看看在老版本的Java中是如何排列字符串的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">"peter"</span>, <span class="string">"anna"</span>, <span class="string">"mike"</span>, <span class="string">"xenia"</span>); </span><br><span class="line">Collections.sort(names, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b.compareTo(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>只需要给静态方法 Collections.sort 传入一个List对象以及一个比较器来按指定顺序排列。通常做法都是创建一个匿名的比较器对象然后将其传递给sort方法。<br>在Java 8 中你就没必要使用这种传统的匿名对象的方式了，Java 8提供了更简洁的语法，lambda表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(names, (String a, String b) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> b.compareTo(a);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>看到了吧，代码变得更段且更具有可读性，但是实际上还可以写得更短：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(names, (String a, String b) -&gt; b.compareTo(a));</span><br></pre></td></tr></table></figure><p>对于函数体只有一行代码的，你可以去掉大括号{}以及return关键字，但是你还可以写得更短点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(names, (a, b) -&gt; b.compareTo(a));</span><br></pre></td></tr></table></figure><p>Java编译器可以自动推导出参数类型，所以你可以不用再写一次类型。</p><h3 id="3函数式接口"><a class="markdownIt-Anchor" href="#3函数式接口"></a> 3.函数式接口</h3><p>Lambda 表达式是如何在java的类型系统中表示的呢？每一个lambda表达式都对应一个类型，通常是接口类型。而“函数式接口”是指仅仅只包含一个抽象方法的 接口，每一个该类型的lambda表达式都会被匹配到这个抽象方法。因为 默认方法 不算抽象方法，所以你也可以给你的函数式接口添加默认方法。</p><p>我们可以将lambda表达式当作任意只包含一个抽象方法的接口类型，确保你的接口一定达到这个要求，你只需要给你的接口添加 <code>@FunctionalInterface</code> 注解，编译器如果发现你标注了这个注解的接口有多于一个抽象方法的时候会报错的。</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">F</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">convert</span><span class="params">(F from)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">Converter&lt;String, Integer&gt; converter = (from) -&gt; Integer.valueOf(from);</span><br><span class="line">Integer converted = converter.convert(<span class="string">"123"</span>);</span><br><span class="line">System.out.println(converted);    <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>需要注意如果<code>@FunctionalInterface</code>如果没有指定，上面的代码也是对的。</p><p>将lambda表达式映射到一个单方法的接口上，这种做法在Java 8之前就有别的语言实现，比如<code>Rhino JavaScript</code>解释器，如果一个函数参数接收一个单方法的接口而你传递的是一个<code>function</code>，<code>Rhino</code> 解释器会自动做一个单接口的实例到function的适配器，典型的应用场景有 <code>org.w3c.dom.events.EventTarget</code> 的<code>addEventListener</code> 第二个参数 <code>EventListener</code>。</p><h3 id="4方法与构造函数引用"><a class="markdownIt-Anchor" href="#4方法与构造函数引用"></a> 4.方法与构造函数引用</h3><p>前一节中的代码还可以通过静态方法引用来表示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Converter&lt;String, Integer&gt; converter = Integer::valueOf;</span><br><span class="line">Integer converted = converter.convert(<span class="string">"123"</span>);</span><br><span class="line">System.out.println(converted);   <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>Java 8 允许你使用 :: 关键字来传递方法或者构造函数引用，上面的代码展示了如何引用一个静态方法，我们也可以引用一个对象的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">converter = something::startsWith;</span><br><span class="line">String converted = converter.convert(<span class="string">"Java"</span>);</span><br><span class="line">System.out.println(converted);    <span class="comment">// "J"</span></span><br></pre></td></tr></table></figure><p>接下来看看构造函数是如何使用::关键字来引用的，首先我们定义一个包含多个构造函数的简单类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String firstName;</span><br><span class="line">    String lastName; </span><br><span class="line">    Person() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Person(String firstName, String lastName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们指定一个用来创建Person对象的对象工厂接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonFactory</span>&lt;<span class="title">P</span> <span class="keyword">extends</span> <span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">P <span class="title">create</span><span class="params">(String firstName, String lastName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们使用构造函数引用来将他们关联起来，而不是实现一个完整的工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PersonFactory&lt;Person&gt; personFactory = Person::<span class="keyword">new</span>;</span><br><span class="line">Person person = personFactory.create(<span class="string">"Peter"</span>, <span class="string">"Parker"</span>);</span><br></pre></td></tr></table></figure><p>我们只需要使用 <code>Person::new</code> 来获取Person类构造函数的引用，Java编译器会自动根据<code>PersonFactory.create</code>方法的签名来选择合适的构造函数。</p><h3 id="5lambda-作用域"><a class="markdownIt-Anchor" href="#5lambda-作用域"></a> 5.Lambda 作用域</h3><p>在lambda表达式中访问外层作用域和老版本的匿名对象中的方式很相似。你可以直接访问标记了final的外层局部变量，或者实例的字段以及静态变量。</p><h3 id="6访问局部变量"><a class="markdownIt-Anchor" href="#6访问局部变量"></a> 6.访问局部变量</h3><p>我们可以直接在lambda表达式中访问外层的局部变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">Converter&lt;Integer, String&gt; stringConverter =</span><br><span class="line">        (from) -&gt; String.valueOf(from + num); </span><br><span class="line">stringConverter.convert(<span class="number">2</span>);     <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>但是和匿名对象不同的是，这里的变量num可以不用声明为final，该代码同样正确：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">Converter&lt;Integer, String&gt; stringConverter =</span><br><span class="line">        (from) -&gt; String.valueOf(from + num); </span><br><span class="line">stringConverter.convert(<span class="number">2</span>);     <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>不过这里的num必须不可被后面的代码修改（即隐性的具有final的语义），例如下面的就无法编译：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">Converter&lt;Integer, String&gt; stringConverter =</span><br><span class="line">        (from) -&gt; String.valueOf(from + num);</span><br><span class="line">num = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>在lambda表达式中试图修改num同样是不允许的。</p><h3 id="7访问对象字段与静态变量"><a class="markdownIt-Anchor" href="#7访问对象字段与静态变量"></a> 7.访问对象字段与静态变量</h3><p>和本地变量不同的是，lambda内部对于实例的字段以及静态变量是即可读又可写。该行为和匿名对象是一致的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lambda4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> outerStaticNum;</span><br><span class="line">    <span class="keyword">int</span> outerNum; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testScopes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Converter&lt;Integer, String&gt; stringConverter1 = (from) -&gt; &#123;</span><br><span class="line">            outerNum = <span class="number">23</span>;</span><br><span class="line">            <span class="keyword">return</span> String.valueOf(from);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Converter&lt;Integer, String&gt; stringConverter2 = (from) -&gt; &#123;</span><br><span class="line">            outerStaticNum = <span class="number">72</span>;</span><br><span class="line">            <span class="keyword">return</span> String.valueOf(from);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8访问接口的默认方法"><a class="markdownIt-Anchor" href="#8访问接口的默认方法"></a> 8.访问接口的默认方法</h3><p>还记得第一节中的formula例子么，接口Formula定义了一个默认方法sqrt可以直接被formula的实例包括匿名对象访问到，但是在lambda表达式中这个是不行的。<br>Lambda表达式中是无法访问到默认方法的，以下代码将无法编译：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Formula formula = (a) -&gt; sqrt( a * <span class="number">100</span>);</span><br><span class="line">Built-in Functional Interfaces</span><br></pre></td></tr></table></figure><p>JDK 1.8 API包含了很多内建的函数式接口，在老Java中常用到的比如<code>Comparator</code>或者<code>Runnable</code>接口，这些接口都增加了<code>@FunctionalInterface</code>注解以便能用在lambda上。<br>Java 8 API同样还提供了很多全新的函数式接口来让工作更加方便，有一些接口是来自Google Guava库里的，即便你对这些很熟悉了，还是有必要看看这些是如何扩展到lambda上使用的。</p><h4 id="predicate接口"><a class="markdownIt-Anchor" href="#predicate接口"></a> Predicate接口</h4><p>Predicate 接口只有一个参数，返回boolean类型。该接口包含多种默认方法来将Predicate组合成其他复杂的逻辑（比如：与，或，非）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; <span class="number">0</span>; </span><br><span class="line">predicate.test(<span class="string">"foo"</span>);              <span class="comment">// true</span></span><br><span class="line">predicate.negate().test(<span class="string">"foo"</span>);     <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">Predicate&lt;Boolean&gt; nonNull = Objects::nonNull;</span><br><span class="line">Predicate&lt;Boolean&gt; isNull = Objects::isNull;</span><br><span class="line"></span><br><span class="line">Predicate&lt;String&gt; isEmpty = String::isEmpty;</span><br><span class="line">Predicate&lt;String&gt; isNotEmpty = isEmpty.negate();</span><br></pre></td></tr></table></figure><h4 id="function-接口"><a class="markdownIt-Anchor" href="#function-接口"></a> Function 接口</h4><p>Function 接口有一个参数并且返回一个结果，并附带了一些可以和其他函数组合的默认方法（compose, andThen）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;String, Integer&gt; toInteger = Integer::valueOf;</span><br><span class="line">Function&lt;String, String&gt; backToString = toInteger.andThen(String::valueOf); </span><br><span class="line">backToString.apply(<span class="string">"123"</span>);     <span class="comment">// "123"</span></span><br></pre></td></tr></table></figure><h4 id="supplier-接口"><a class="markdownIt-Anchor" href="#supplier-接口"></a> Supplier 接口</h4><p>Supplier 接口返回一个任意范型的值，和Function接口不同的是该接口没有任何参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;Person&gt; personSupplier = Person::<span class="keyword">new</span>;</span><br><span class="line">personSupplier.get();   <span class="comment">// new Person</span></span><br></pre></td></tr></table></figure><h4 id="consumer-接口"><a class="markdownIt-Anchor" href="#consumer-接口"></a> Consumer 接口</h4><p>Consumer 接口表示执行在单个参数上的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;Person&gt; greeter = (p) -&gt; System.out.println(<span class="string">"Hello, "</span> + p.firstName);</span><br><span class="line">greeter.accept(<span class="keyword">new</span> Person(<span class="string">"Luke"</span>, <span class="string">"Skywalker"</span>));</span><br></pre></td></tr></table></figure><h4 id="comparator-接口"><a class="markdownIt-Anchor" href="#comparator-接口"></a> Comparator 接口</h4><p>Comparator 是老Java中的经典接口， Java 8在此之上添加了多种默认方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Person&gt; comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName); </span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="string">"Doe"</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">"Alice"</span>, <span class="string">"Wonderland"</span>);</span><br><span class="line"></span><br><span class="line">comparator.compare(p1, p2);             <span class="comment">// &gt; 0</span></span><br><span class="line">comparator.reversed().compare(p1, p2);  <span class="comment">// &lt; 0</span></span><br></pre></td></tr></table></figure><h4 id="optional-接口"><a class="markdownIt-Anchor" href="#optional-接口"></a> Optional 接口</h4><p>Optional 不是函数是接口，这是个用来防止NullPointerException异常的辅助类型，这是下一届中将要用到的重要概念，现在先简单的看看这个接口能干什么：</p><p>Optional 被定义为一个简单的容器，其值可能是null或者不是null。在Java 8之前一般某个函数应该返回非空对象但是偶尔却可能返回了null，而在Java 8中，不推荐你返回null而是返回Optional。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Optional&lt;String&gt; optional = Optional.of(<span class="string">"bam"</span>); </span><br><span class="line">optional.isPresent();           <span class="comment">// true</span></span><br><span class="line">optional.get();                 <span class="comment">// "bam"</span></span><br><span class="line">optional.orElse(<span class="string">"fallback"</span>);    <span class="comment">// "bam"</span></span><br><span class="line"></span><br><span class="line">optional.ifPresent((s) -&gt; System.out.println(s.charAt(<span class="number">0</span>)));     <span class="comment">// "b"</span></span><br></pre></td></tr></table></figure><h4 id="stream-接口"><a class="markdownIt-Anchor" href="#stream-接口"></a> Stream 接口</h4><p>java.util.Stream 表示能应用在一组元素上一次执行的操作序列。Stream 操作分为中间操作或者最终操作两种，最终操作返回一特定类型的计算结果，而中间操作返回Stream本身，这样你就可以将多个操作依次串起来。 Stream 的创建需要指定一个数据源，比如 java.util.Collection的子类，List或者Set， Map不支持。Stream的操作可以串行执行或者并行执行。</p><p>首先看看Stream是怎么用，首先创建实例代码的用到的数据List：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; stringCollection = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">stringCollection.add(<span class="string">"ddd2"</span>);</span><br><span class="line">stringCollection.add(<span class="string">"aaa2"</span>);</span><br><span class="line">stringCollection.add(<span class="string">"bbb1"</span>);</span><br><span class="line">stringCollection.add(<span class="string">"aaa1"</span>);</span><br><span class="line">stringCollection.add(<span class="string">"bbb3"</span>);</span><br><span class="line">stringCollection.add(<span class="string">"ccc"</span>);</span><br><span class="line">stringCollection.add(<span class="string">"bbb2"</span>);</span><br><span class="line">stringCollection.add(<span class="string">"ddd1"</span>);</span><br></pre></td></tr></table></figure><p>Java 8扩展了集合类，可以通过 Collection.stream() 或者 Collection.parallelStream() 来创建一个Stream。</p><h4 id="filter-过滤"><a class="markdownIt-Anchor" href="#filter-过滤"></a> Filter 过滤</h4><p>过滤通过一个predicate接口来过滤并只保留符合条件的元素，该操作属于中间操作，所以我们可以在过滤后的结果来应用其他Stream操作 （比如forEach）。forEach需要一个函数来对过滤后的元素依次执行。forEach是一个最终操作，所以我们不能在forEach之后来执行 其他Stream操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stringCollection</span><br><span class="line">    .stream()</span><br><span class="line">    .filter((s) -&gt; s.startsWith(<span class="string">"a"</span>))</span><br><span class="line">    .forEach(System.out::println); </span><br><span class="line"><span class="comment">// "aaa2", "aaa1"</span></span><br></pre></td></tr></table></figure><h4 id="sort-排序"><a class="markdownIt-Anchor" href="#sort-排序"></a> Sort 排序</h4><p>排序是一个中间操作，返回的是排序好后的Stream。如果你不指定一个自定义的Comparator则会使用默认排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">stringCollection</span><br><span class="line">    .stream()</span><br><span class="line">    .sorted()</span><br><span class="line">    .filter((s) -&gt; s.startsWith(<span class="string">"a"</span>))</span><br><span class="line">    .forEach(System.out::println); </span><br><span class="line"><span class="comment">// "aaa1", "aaa2"</span></span><br></pre></td></tr></table></figure><p>需要注意的是，排序只创建了一个排列好后的Stream，而不会影响原有的数据源，排序之后原数据stringCollection是不会被修改的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(stringCollection);</span><br><span class="line"><span class="comment">// ddd2, aaa2, bbb1, aaa1, bbb3, ccc, bbb2, ddd1</span></span><br></pre></td></tr></table></figure><h4 id="map-映射"><a class="markdownIt-Anchor" href="#map-映射"></a> Map 映射</h4><p>中间操作map会将元素根据指定的Function接口来依次将元素转成另外的对象，下面的示例展示了将字符串转换为大写字符串。你也可以通过map来讲对象转换成其他类型，map返回的Stream类型是根据你map传递进去的函数的返回值决定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stringCollection</span><br><span class="line">    .stream()</span><br><span class="line">    .map(String::toUpperCase)</span><br><span class="line">    .sorted((a, b) -&gt; b.compareTo(a))</span><br><span class="line">    .forEach(System.out::println); </span><br><span class="line"><span class="comment">// "DDD2", "DDD1", "CCC", "BBB3", "BBB2", "AAA2", "AAA1"</span></span><br></pre></td></tr></table></figure><h4 id="match-匹配"><a class="markdownIt-Anchor" href="#match-匹配"></a> Match 匹配</h4><p>Stream提供了多种匹配操作，允许检测指定的Predicate是否匹配整个Stream。所有的匹配操作都是最终操作，并返回一个boolean类型的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> anyStartsWithA = </span><br><span class="line">    stringCollection</span><br><span class="line">        .stream()</span><br><span class="line">        .anyMatch((s) -&gt; s.startsWith(<span class="string">"a"</span>)); </span><br><span class="line">System.out.println(anyStartsWithA);      <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> allStartsWithA = </span><br><span class="line">    stringCollection</span><br><span class="line">        .stream()</span><br><span class="line">        .allMatch((s) -&gt; s.startsWith(<span class="string">"a"</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(allStartsWithA);      <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> noneStartsWithZ = </span><br><span class="line">    stringCollection</span><br><span class="line">        .stream()</span><br><span class="line">        .noneMatch((s) -&gt; s.startsWith(<span class="string">"z"</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(noneStartsWithZ);      <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="count-计数"><a class="markdownIt-Anchor" href="#count-计数"></a> Count 计数</h4><p>计数是一个最终操作，返回Stream中元素的个数，返回值类型是long。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> startsWithB = </span><br><span class="line">    stringCollection</span><br><span class="line">        .stream()</span><br><span class="line">        .filter((s) -&gt; s.startsWith(<span class="string">"b"</span>))</span><br><span class="line">        .count(); </span><br><span class="line">System.out.println(startsWithB);    <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="reduce-规约"><a class="markdownIt-Anchor" href="#reduce-规约"></a> Reduce 规约</h4><p>这是一个最终操作，允许通过指定的函数来讲stream中的多个元素规约为一个元素，规越后的结果是通过Optional接口表示的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; reduced =</span><br><span class="line">    stringCollection</span><br><span class="line">        .stream()</span><br><span class="line">        .sorted()</span><br><span class="line">        .reduce((s1, s2) -&gt; s1 + <span class="string">"#"</span> + s2); </span><br><span class="line">reduced.ifPresent(System.out::println);</span><br><span class="line"><span class="comment">// "aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2"</span></span><br></pre></td></tr></table></figure><h4 id="并行streams"><a class="markdownIt-Anchor" href="#并行streams"></a> 并行Streams</h4><p>前面提到过Stream有串行和并行两种，串行Stream上的操作是在一个线程中依次完成，而并行Stream则是在多个线程上同时执行。</p><p>下面的例子展示了是如何通过并行Stream来提升性能：</p><p>首先我们创建一个没有重复元素的大表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> max = <span class="number">1000000</span>;</span><br><span class="line">List&lt;String&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;(max);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">    UUID uuid = UUID.randomUUID();</span><br><span class="line">    values.add(uuid.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们计算一下排序这个Stream要耗时多久，<br>串行排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> t0 = System.nanoTime(); </span><br><span class="line"><span class="keyword">long</span> count = values.stream().sorted().count();</span><br><span class="line">System.out.println(count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);</span><br><span class="line">System.out.println(String.format(<span class="string">"sequential sort took: %d ms"</span>, millis));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 串行耗时: 899 ms</span></span><br></pre></td></tr></table></figure><p>并行排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> t0 = System.nanoTime(); </span><br><span class="line"><span class="keyword">long</span> count = values.parallelStream().sorted().count();</span><br><span class="line">System.out.println(count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);</span><br><span class="line">System.out.println(String.format(<span class="string">"parallel sort took: %d ms"</span>, millis));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并行排序耗时: 472 ms</span></span><br></pre></td></tr></table></figure><p>上面两个代码几乎是一样的，但是并行版的快了50%之多，唯一需要做的改动就是将<code>stream()</code>改为<code>parallelStream()</code>。</p><h4 id="map"><a class="markdownIt-Anchor" href="#map"></a> Map</h4><p>前面提到过，Map类型不支持stream，不过Map提供了一些新的有用的方法来处理一些日常任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    map.putIfAbsent(i, <span class="string">"val"</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map.forEach((id, val) -&gt; System.out.println(val));</span><br></pre></td></tr></table></figure><p>以上代码很容易理解， putIfAbsent 不需要我们做额外的存在性检查，而forEach则接收一个Consumer接口来对map里的每一个键值对进行操作。</p><p>下面的例子展示了map上的其他有用的函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">map.computeIfPresent(<span class="number">3</span>, (num, val) -&gt; val + num);</span><br><span class="line">map.get(<span class="number">3</span>);             <span class="comment">// val33 </span></span><br><span class="line">map.computeIfPresent(<span class="number">9</span>, (num, val) -&gt; <span class="keyword">null</span>);</span><br><span class="line">map.containsKey(<span class="number">9</span>);     <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">map.computeIfAbsent(<span class="number">23</span>, num -&gt; <span class="string">"val"</span> + num);</span><br><span class="line">map.containsKey(<span class="number">23</span>);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">map.computeIfAbsent(<span class="number">3</span>, num -&gt; <span class="string">"bam"</span>);</span><br><span class="line">map.get(<span class="number">3</span>);             <span class="comment">// val33</span></span><br></pre></td></tr></table></figure><p>接下来展示如何在Map里删除一个键值全都匹配的项：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map.remove(<span class="number">3</span>, <span class="string">"val3"</span>);</span><br><span class="line">map.get(<span class="number">3</span>);             <span class="comment">// val33 </span></span><br><span class="line">map.remove(<span class="number">3</span>, <span class="string">"val33"</span>);</span><br><span class="line">map.get(<span class="number">3</span>);             <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>另外一个有用的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.getOrDefault(<span class="number">42</span>, <span class="string">"not found"</span>);  <span class="comment">// not found</span></span><br></pre></td></tr></table></figure><p>对Map的元素做合并也变得很容易了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">map.merge(<span class="number">9</span>, <span class="string">"val9"</span>, (value, newValue) -&gt; value.concat(newValue));</span><br><span class="line">map.get(<span class="number">9</span>);             <span class="comment">// val9 </span></span><br><span class="line">map.merge(<span class="number">9</span>, <span class="string">"concat"</span>, (value, newValue) -&gt; value.concat(newValue));</span><br><span class="line">map.get(<span class="number">9</span>);             <span class="comment">// val9concat</span></span><br></pre></td></tr></table></figure><p>Merge做的事情是如果键名不存在则插入，否则则对原键对应的值做合并操作并重新插入到map中。</p><h3 id="9date-api"><a class="markdownIt-Anchor" href="#9date-api"></a> 9.Date API</h3><p>Java 8 在包java.time下包含了一组全新的时间日期API。新的日期API和开源的Joda-Time库差不多，但又不完全一样，下面的例子展示了这组新API里最重要的一些部分：<br><code>Clock</code> 时钟</p><p><code>Clock</code>类提供了访问当前日期和时间的方法，<code>Clock</code>是时区敏感的，可以用来取代 <code>System.currentTimeMillis()</code> 来获取当前的微秒数。某一个特定的时间点也可以使用<code>Instant</code>类来表示，<code>Instant</code>类也可以用来创建老的<code>java.util.Date</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Clock clock = Clock.systemDefaultZone();</span><br><span class="line"><span class="keyword">long</span> millis = clock.millis(); </span><br><span class="line">Instant instant = clock.instant();</span><br><span class="line">Date legacyDate = Date.from(instant);   <span class="comment">// legacy java.util.Date</span></span><br></pre></td></tr></table></figure><h4 id="timezones-时区"><a class="markdownIt-Anchor" href="#timezones-时区"></a> Timezones 时区</h4><p>在新API中时区使用ZoneId来表示。时区可以很方便的使用静态方法of来获取到。 时区定义了到UTS时间的时间差，在Instant时间点对象到本地日期对象之间转换的时候是极其重要的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">System.out.println(ZoneId.getAvailableZoneIds());</span><br><span class="line"><span class="comment">// prints all available timezone ids </span></span><br><span class="line">ZoneId zone1 = ZoneId.of(<span class="string">"Europe/Berlin"</span>);</span><br><span class="line">ZoneId zone2 = ZoneId.of(<span class="string">"Brazil/East"</span>);</span><br><span class="line">System.out.println(zone1.getRules());</span><br><span class="line">System.out.println(zone2.getRules());</span><br><span class="line"></span><br><span class="line"><span class="comment">// ZoneRules[currentStandardOffset=+01:00]</span></span><br><span class="line"><span class="comment">// ZoneRules[currentStandardOffset=-03:00]</span></span><br></pre></td></tr></table></figure><h4 id="localtime-本地时间"><a class="markdownIt-Anchor" href="#localtime-本地时间"></a> LocalTime 本地时间</h4><p>LocalTime 定义了一个没有时区信息的时间，例如 晚上10点，或者 17:30:15。下面的例子使用前面代码创建的时区创建了两个本地时间。之后比较时间并以小时和分钟为单位计算两个时间的时间差：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LocalTime now1 = LocalTime.now(zone1);</span><br><span class="line">LocalTime now2 = LocalTime.now(zone2); </span><br><span class="line">System.out.println(now1.isBefore(now2));  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> hoursBetween = ChronoUnit.HOURS.between(now1, now2);</span><br><span class="line"><span class="keyword">long</span> minutesBetween = ChronoUnit.MINUTES.between(now1, now2);</span><br><span class="line"></span><br><span class="line">System.out.println(hoursBetween);       <span class="comment">// -3</span></span><br><span class="line">System.out.println(minutesBetween);     <span class="comment">// -239</span></span><br></pre></td></tr></table></figure><p>LocalTime 提供了多种工厂方法来简化对象的创建，包括解析时间字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LocalTime late = LocalTime.of(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line">System.out.println(late);       <span class="comment">// 23:59:59 </span></span><br><span class="line">DateTimeFormatter germanFormatter =</span><br><span class="line">    DateTimeFormatter</span><br><span class="line">        .ofLocalizedTime(FormatStyle.SHORT)</span><br><span class="line">        .withLocale(Locale.GERMAN);</span><br><span class="line"></span><br><span class="line">LocalTime leetTime = LocalTime.parse(<span class="string">"13:37"</span>, germanFormatter);</span><br><span class="line">System.out.println(leetTime);   <span class="comment">// 13:37</span></span><br></pre></td></tr></table></figure><h4 id="localdate-本地日期"><a class="markdownIt-Anchor" href="#localdate-本地日期"></a> LocalDate 本地日期</h4><p>LocalDate 表示了一个确切的日期，比如 2014-03-11。该对象值是不可变的，用起来和LocalTime基本一致。下面的例子展示了如何给Date对象加减天/月/年。另外要注意的是这些对象是不可变的，操作返回的总是一个新实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">LocalDate tomorrow = today.plus(<span class="number">1</span>, ChronoUnit.DAYS);</span><br><span class="line">LocalDate yesterday = tomorrow.minusDays(<span class="number">2</span>); </span><br><span class="line">LocalDate independenceDay = LocalDate.of(<span class="number">2014</span>, Month.JULY, <span class="number">4</span>);</span><br><span class="line">DayOfWeek dayOfWeek = independenceDay.getDayOfWeek();</span><br><span class="line"></span><br><span class="line">System.out.println(dayOfWeek);    <span class="comment">// FRIDAY</span></span><br></pre></td></tr></table></figure><p>从字符串解析一个LocalDate类型和解析LocalTime一样简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter germanFormatter =</span><br><span class="line">    DateTimeFormatter</span><br><span class="line">        .ofLocalizedDate(FormatStyle.MEDIUM)</span><br><span class="line">        .withLocale(Locale.GERMAN); </span><br><span class="line">LocalDate xmas = LocalDate.parse(<span class="string">"24.12.2014"</span>, germanFormatter);</span><br><span class="line">System.out.println(xmas);   <span class="comment">// 2014-12-24</span></span><br></pre></td></tr></table></figure><h4 id="localdatetime-本地日期时间"><a class="markdownIt-Anchor" href="#localdatetime-本地日期时间"></a> LocalDateTime 本地日期时间</h4><p>LocalDateTime 同时表示了时间和日期，相当于前两节内容合并到一个对象上了。LocalDateTime和LocalTime还有LocalDate一样，都是不可变的。LocalDateTime提供了一些能访问具体字段的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">LocalDateTime sylvester = LocalDateTime.of(<span class="number">2014</span>, Month.DECEMBER, <span class="number">31</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>); </span><br><span class="line">DayOfWeek dayOfWeek = sylvester.getDayOfWeek();</span><br><span class="line">System.out.println(dayOfWeek);      <span class="comment">// WEDNESDAY</span></span><br><span class="line"></span><br><span class="line">Month month = sylvester.getMonth();</span><br><span class="line">System.out.println(month);          <span class="comment">// DECEMBER</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> minuteOfDay = sylvester.getLong(ChronoField.MINUTE_OF_DAY);</span><br><span class="line">System.out.println(minuteOfDay);    <span class="comment">// 1439</span></span><br></pre></td></tr></table></figure><p>只要附加上时区信息，就可以将其转换为一个时间点Instant对象，Instant时间点对象可以很容易的转换为老式的java.util.Date。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Instant instant = sylvester</span><br><span class="line">        .atZone(ZoneId.systemDefault())</span><br><span class="line">        .toInstant(); </span><br><span class="line">Date legacyDate = Date.from(instant);</span><br><span class="line">System.out.println(legacyDate);     <span class="comment">// Wed Dec 31 23:59:59 CET 2014</span></span><br></pre></td></tr></table></figure><p>格式化LocalDateTime和格式化时间和日期一样的，除了使用预定义好的格式外，我们也可以自己定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter formatter =</span><br><span class="line">    DateTimeFormatter</span><br><span class="line">        .ofPattern(<span class="string">"MMM dd, yyyy - HH:mm"</span>); </span><br><span class="line">LocalDateTime parsed = LocalDateTime.parse(<span class="string">"Nov 03, 2014 - 07:13"</span>, formatter);</span><br><span class="line">String string = formatter.format(parsed);</span><br><span class="line">System.out.println(string);     <span class="comment">// Nov 03, 2014 - 07:13</span></span><br></pre></td></tr></table></figure><p>和java.text.NumberFormat不一样的是新版的DateTimeFormatter是不可变的，所以它是线程安全的。</p><p>关于时间日期格式的详细信息 <a href="http://download.java.net/jdk8/docs/api/java/time/format/DateTimeFormatter.html" target="_blank" rel="noopener">http://download.java.net/jdk8/docs/api/java/time/format/DateTimeFormatter.html</a></p><h3 id="10annotation-注解"><a class="markdownIt-Anchor" href="#10annotation-注解"></a> 10.Annotation 注解</h3><p>在Java 8中支持多重注解了，先看个例子来理解一下是什么意思。<br>首先定义一个包装类Hints注解用来放置一组具体的Hint注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@interface</span> Hints &#123;</span><br><span class="line">    Hint[] value();</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">@Repeatable</span>(Hints.class)</span><br><span class="line"><span class="meta">@interface</span> Hint &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 8允许我们把同一个类型的注解使用多次，只需要给该注解标注一下@Repeatable即可。<br>例 1: 使用包装类当容器来存多个注解（老方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Hints</span>(&#123;<span class="meta">@Hint</span>(<span class="string">"hint1"</span>), <span class="meta">@Hint</span>(<span class="string">"hint2"</span>)&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>例 2：使用多重注解（新方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Hint</span>(<span class="string">"hint1"</span>)</span><br><span class="line"><span class="meta">@Hint</span>(<span class="string">"hint2"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>第二个例子里java编译器会隐性的帮你定义好@Hints注解，了解这一点有助于你用反射来获取这些信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Hint hint = Person.class.getAnnotation(Hint.class);</span><br><span class="line">System.out.println(hint);                   <span class="comment">// null </span></span><br><span class="line">Hints hints1 = Person.class.getAnnotation(Hints.class);</span><br><span class="line">System.out.println(hints1.value().length);  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">Hint[] hints2 = Person.class.getAnnotationsByType(Hint.class);</span><br><span class="line">System.out.println(hints2.length);          <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>即便我们没有在Person类上定义<code>@Hints</code>注解，我们还是可以通过 <code>getAnnotation(Hints.class)</code>来获取 <code>@Hints</code>注解，更加方便的方法是使用 <code>getAnnotationsByType</code> 可以直接获取到所有的<code>@Hint</code>注解。</p><p>另外Java 8的注解还增加到两种新的target上了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE_PARAMETER, ElementType.TYPE_USE&#125;)</span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;&#125;</span><br></pre></td></tr></table></figure><p>关于Java 8的新特性就写到这了，肯定还有更多的特性等待发掘。JDK 1.8里还有很多很有用的东西，比如Arrays.parallelSort, StampedLock和CompletableFuture等等。</p><p>参考：<a href="http://iteye.blog.163.com/blog/static/18630809620127136516641/?suggestedreading&amp;wumii" target="_blank" rel="noopener">http://iteye.blog.163.com/blog/static/18630809620127136516641/?suggestedreading&amp;wumii</a></p><p><a href="http://www.jb51.net/article/48304.htm" target="_blank" rel="noopener">http://www.jb51.net/article/48304.htm</a></p><p>相关：<a href="http://www.2cto.com/kf/201307/225968.html" target="_blank" rel="noopener">http://www.2cto.com/kf/201307/225968.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;对于很多刚接触java语言的初学者来说，要了解一门语言，最好的方式就是要能从基础的版本进行了解，升级的过程，以及升级的新特性，这样才能循序渐进的学好一门语言。今天先为大家介绍一下JDK1.5版本到JDK1.7版本的特性。希望能给予帮助。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="https://tangbaohua1.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://tangbaohua1.github.io/tags/java/"/>
    
      <category term="jdk" scheme="https://tangbaohua1.github.io/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+github搭建个人博客</title>
    <link href="https://tangbaohua1.github.io/2018/06/14/Hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://tangbaohua1.github.io/2018/06/14/Hexo+github搭建个人博客/</id>
    <published>2018-06-14T08:50:49.000Z</published>
    <updated>2018-06-20T04:12:18.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexogithub搭建个人博客"><a class="markdownIt-Anchor" href="#hexogithub搭建个人博客"></a> Hexo+github搭建个人博客</h1><h3 id="思维导图总览"><a class="markdownIt-Anchor" href="#思维导图总览"></a> 思维导图总览：</h3><p><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232604913-1510539894.png" alt="enter image description here"></p><a id="more"></a><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><h4 id="hexo"><a class="markdownIt-Anchor" href="#hexo"></a> Hexo:</h4><p>Hexo 是一款基于Node.js、快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>官网 <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/index.html</a></p><h4 id="nodejs"><a class="markdownIt-Anchor" href="#nodejs"></a> NodeJs:</h4><p>Nodejs框架是基于V8的引擎，是目前速度最快的Javascript引擎。chrome浏览器就基于V8，同时打开20-30个网页都很流畅。Nodejs标准的web开发框架Express，可以帮助我们迅速建立web站点，比起PHP的开发效率更高，而且学习曲线更低。非常适合小型网站，个性化网站，我们自己的Geek网站！！</p><p>JS是脚本语言，脚本语言需要一个解析器才能运行。对于写在HTML页面里面的JS，浏览器充当了解析器的角色。而对于需要独立运行的JS，NodeJS就是一个解析器。</p><p>每种解析器就是一个运行环境，不但允许JS定义各种数据结构，进行各种计算，还允许JS使用运行环境提供的内置对象和方法做一些事情。例如运行在浏览器中的JS的用途是操作DOM，浏览器就提供了document之类的内置对象。而运行在NodeJS中的JS的用途是操作磁盘文件或者搭建HTTP服务器，NodeJS就相应提供了fs、http等内置对象.<br>【规律使我们开阔，但文化使我们更加深刻。】</p><p>弄清楚一样东西存在的意义还是蛮重要的，因此，我们要上一堂历史课咯~</p><p>话说当年NodeJS的作者啊，在创造NodeJS之初，他想实现一个高性能的Web服务器，这厮首先看重的是事件机制和异步IO模型的优越性，而不是JS。但是呢，他首要做的一件事就是要找一门语言，来实现他伟大的想法，而这门语言不能是自带IO功能的（为毛线不能自带啊？那个立志成为海贼王的男人嘛，发现以前同步IO太TM坑爹咯，要自己实现一个异步IO模型，并且能良好的支持事件机制( ⊙ o ⊙ )啊！）。JS没有自带IO功能，天生就用于处理浏览器的DOM事件，并且有一大群屌丝程序员，因此就成为了天然的选择啦。</p><p>如他所愿，NodeJS在服务器端活跃起来，出现了大批基于NodeJS的Web服务。而另一方面，NodeJS让前端的开发人员（说你耶）如获神器，终于可以在自己的有生之年，让自己的能力范围内跳出浏览器窗口。自从这春风拂面，大批的开发工具如雨后春笋般涌现，前端开发者的谜之微笑，灿若桃花（闭上眼睛，用心感受）。SO，对于前端而言，虽然不是人人都要拿NodeJS写一个服务器程序，但其简单程度可至使用命令交互模式调试JS代码片段，复杂可至编写工具提高工作效率。可谓，居家旅行必备的装逼神器。</p><p>NodeJS生态圈正欣欣向荣，画面太美，不忍直视。</p><h4 id="github"><a class="markdownIt-Anchor" href="#github"></a> Github</h4><p>GitHub is the single largest host for Git repositories, and is the central point of collaboration for millions of developers and projects. A large percentage of all Git repositories are hosted on GitHub, and many open-source projects use it for Git hosting, issue tracking, code review, and other things. So while it’s not a direct part of the Git open source project, there’s a good chance that you’ll want or need to interact with GitHub at some point while using Git professionally.</p><p>–摘自官方文档</p><p>(⊙o⊙)… 这堆鸡肠是神马意思？好吧，我意译一下，水平有限，请不吝赐教。</p><p>Github是Git仓库唯一且最大的主机，它是数以万计的开发者和项目协作的中心点。绝大部分Git仓库托管在GitHub上，许多的开源项目使用Github的Git仓库托管服务，问题跟踪，代码复查和其他的东西。因此，虽然它不是直接参与Git的开源项目，但这是一个你会想要或者需要在某些时候专业地使用Git与github互动的好机会。</p><p>（翻译得好烂… … ）</p><h4 id="git"><a class="markdownIt-Anchor" href="#git"></a> Git</h4><p>是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。</p><h4 id="github-page"><a class="markdownIt-Anchor" href="#github-page"></a> Github page:</h4><p>GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。<br>github Pages可以被认为是用户编写的、托管在github上的静态网页。<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232611554-1539901115.png" alt="enter image description here"></p><h4 id="markdown"><a class="markdownIt-Anchor" href="#markdown"></a> Markdown</h4><p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。[1]这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p><p>优点：</p><p>1、简单，容易上手</p><p>2、纯文本实现，程序员最爱，容易扩展，方便和其他工具联动</p><p>3、平台支持广：以Github为首的各种平台、各种博客都支持，基本上现在面向程序员的输入框都可以用Markdown来写了</p><p>4、丰富的工具链</p><p>5、编辑器：各种支持所见即所得的编辑器</p><p>6、和各种其他格式互相转化的工具。PDF、Mobi、Epub、HTML等等，几乎你能想到的所有格式它都能转换。</p><h3 id="how"><a class="markdownIt-Anchor" href="#how"></a> HOW?</h3><h4 id="环境配置"><a class="markdownIt-Anchor" href="#环境配置"></a> 环境配置</h4><p><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232612195-119279404.png" alt="enter image description here">node-v4.4.0-x64.msi<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232612507-1187146101.png" alt="enter image description here">Git-1.9.5-preview20150319.exe<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232613382-1039223928.png" alt="enter image description here">markdownpad2-setup.exe（markdown离线编辑器，可选，替代方案是使用在线的马克飞象工具编辑markdown文件）</p><h4 id="安装git"><a class="markdownIt-Anchor" href="#安装git"></a> 安装Git</h4><p><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232614085-1131765715.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232614804-834625382.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232615601-1795945186.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232616757-870919409.png" alt="enter image description here"><br>就此不截图了，一直下一步，然后自定义一个安装路径，安装即可。</p><h4 id="安装nodejs"><a class="markdownIt-Anchor" href="#安装nodejs"></a> 安装Node.js</h4><p><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232617898-768110250.png" alt="enter image description here"><br>也是一直下一步，选择一个自定义的安装路径。接着要配置环境变量：<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232619179-1359846250.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232620460-1237109258.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232621273-1242527090.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232621835-224445879.png" alt="enter image description here"><br>D:\software\develop\nodejs\是我的NodeJs的安装目录，你配环境变量的时候要配你自己安装的目录。配环境变量是为了让windows的命令行能调用到NodeJS里面的命令。<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232622960-1346257054.png" alt="enter image description here"></p><h4 id="安装hexo"><a class="markdownIt-Anchor" href="#安装hexo"></a> 安装hexo</h4><p>第一步：打开cmd。<img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232623757-1712823215.png" alt="enter image description here"><br>第二步：进入NodeJS的安装目录<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232624491-800852353.png" alt="enter image description here"><br>第三步：开始安装hexo，利用 npm 命令即可安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232625054-2121352408.png" alt="enter image description here"></p><h4 id="开始搭建博客"><a class="markdownIt-Anchor" href="#开始搭建博客"></a> 开始搭建博客</h4><p>来杯咖啡稍作等待，即可安装成功。接下来，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog &amp;&amp; cd blog</span><br></pre></td></tr></table></figure><p>此处blog便是你的博客目录，当然其他什么名字也是极好的，看心情了，此时最好将此目录备份到云盘或者其他地方，以防文件夹丢失后博客就没有了。<br>然后执行<br><code>cmd命令 hexo init</code><br>安装依赖包<br><code>cmd命令 npm install</code><br>至此，博客搭建成功！当然，仅仅是本地的了。此时执行<br><code>cmd命令 hexo g</code><br>即可生成静态页面，然后执行<br><code>cmd命令 hexo s</code><br>访问http://localhost:4000即可看到你的博客。<br>如果想让放到网上该怎么办呢？那就接着往下看咯。</p><p><strong>注意：暂时别关你的cmd窗口。</strong></p><h3 id="部署博客到github"><a class="markdownIt-Anchor" href="#部署博客到github"></a> 部署博客到github</h3><h4 id="1-注册账号"><a class="markdownIt-Anchor" href="#1-注册账号"></a> 1、注册账号</h4><p>The first thing you need to do is set up a free user account. Simply visithttps://github.com, choose a user name that isn’t already taken, provide an email address and a password, and click the big green “Sign up for GitHub” button.</p><p>你所要做的第一件事就是创建一个免费的用户账号。简单地访问https://github.com，选择一个未被使用过的用户名，提供一个邮箱地址以及密码，并点击写着“sign up for GitHub”的绿色按钮。<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232627445-1567738449.png" alt="enter image description here"><br>经过邮箱认证后，该账号就会被激活的。</p><h4 id="2-创建一个仓库"><a class="markdownIt-Anchor" href="#2-创建一个仓库"></a> 2、创建一个仓库</h4><p><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232628679-1429215245.png" alt="enter image description here"><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232629413-1213363782.png" alt="enter image description here"><br>注：Github Pages的Repository名字是特定的，比如我Github账号是dantefung，那么我Github Pages <a href="http://xn--Repositorydantefung-uh36av43hb6d8y6e.github.io" target="_blank" rel="noopener">Repository名字就是dantefung.github.io</a>。</p><h4 id="3-设置github-pages"><a class="markdownIt-Anchor" href="#3-设置github-pages"></a> 3、设置github pages</h4><p>创建成功后，回到主页面，点击进入你刚刚创建好的仓库<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232630195-744532888.png" alt="enter image description here"><br>接着点击settings，进入仓库管理<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232630851-1196289081.png" alt="enter image description here"><br>更新你的站点<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232631398-1277752594.png" alt="enter image description here"><br>选择主题并发布<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232632241-221041845.png" alt="enter image description here"><br>至此，你的github pages就发布成功了。试试在浏览器的地址栏输入”<a href="http://xn--github-on9im33ani7aou3bmed.github.io" target="_blank" rel="noopener">你github的用户名.github.io</a>”吧！</p><p>现在回到你的 ,</p><p><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232633179-1045596290.png" alt="enter image description here"><br>打开你安装好的NodeJS的根目录，然后点击进入刚刚新建的blog文件夹：<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232634116-37443492.png" alt="enter image description here"><br>在文件的底部，将配置改成介样：</p><p>其中只需修改一下repository，将其内容修改为刚刚新建的项目的仓库地址即可。<img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232635695-3641401.png" alt="enter image description here">接下来，回到你的cmd窗口，只需执行两个命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save （这命令是为了解决hexo新版本的部署问题）  </span><br><span class="line">hexo g 回车 （这是重新生成blog） </span><br><span class="line">hexo d 回车 （这是将本地blog部署到github的仓库）</span><br></pre></td></tr></table></figure><p>现在，试试在浏览器的地址栏输入：“<a href="http://xn--6qqv7i14ofosyrb.github.io" target="_blank" rel="noopener">你的用户名.github.io</a>”，此时，你应该会看到这样的界面：<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232637101-1279946777.png" alt="enter image description here"><br>你可能会吐槽这个主题怎么这么难看，好下面我就教你怎么改主题。此时，你的cmd窗口还是先别关。</p><h3 id="主题篇"><a class="markdownIt-Anchor" href="#主题篇"></a> 主题篇</h3><p>接下来，开始对博客进行一番改造。毕竟博客是自己精神上的一个家园，当然要装饰打造一番了。</p><p>首先嘛，自然是进行主题的选择了，主题在这里。选择好一个主题之后，就是进行主题的安装了。在刚刚那个网站上，点击右边的链接可以看到主题的Demo，选则一个喜欢的主题然后点击左边的链接进入github上：<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232638163-653565141.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232638710-1363753984.png" alt="enter image description here"></p><h4 id="第一步克隆主题到本地themes目录下"><a class="markdownIt-Anchor" href="#第一步克隆主题到本地themes目录下"></a> 第一步：克隆主题到本地themes目录下</h4><h5 id="方式一"><a class="markdownIt-Anchor" href="#方式一"></a> 方式一：</h5><p>然后命令行进入到你的博客目录的themes目录下：<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232639632-1201587041.png" alt="enter image description here"><br>点击鼠标右键，打开github bash执行下面语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/ppoffice/hexo-theme-alex.git</span><br><span class="line">（这个是刚刚那个页面的Install下的命令 ）</span><br></pre></td></tr></table></figure><p><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232640382-886274921.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232641507-1972208702.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232642273-923149866.png" alt="enter image description here"></p><h5 id="方式二"><a class="markdownIt-Anchor" href="#方式二"></a> 方式二：</h5><p>然后命令行进入到你的博客目录目录下：<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232643163-909671542.png" alt="enter image description here"><br>执行如下命令：<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232643726-2128050864.png" alt="enter image description here"><br>然后你会在“你的blog目录/themes”下看到：<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232644413-1045614460.png" alt="enter image description here"><br>其中git clone后面的链接为你进入的主题的链接地址，themes/alex为你的保存目录，此处已alex主题为栗子，具体的以你选择的主题为准。</p><h4 id="第二步配置你将要生成的博客主题为刚刚克隆的主题"><a class="markdownIt-Anchor" href="#第二步配置你将要生成的博客主题为刚刚克隆的主题"></a> 第二步：配置你将要生成的博客主题为刚刚克隆的主题</h4><p>然后进入到/blog/_config.yml里面，将theme改为你刚刚下载保存的主题的名字<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232645241-1628496699.png" alt="enter image description here"><br>然后回到cmd，执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g 回车 （这是重新生成blog）</span><br><span class="line"></span><br><span class="line">hexo d 回车 （这是将本地blog部署到github的仓库）</span><br></pre></td></tr></table></figure><p>好了，试试在浏览器的地址栏输入：“<a href="http://xn--github-on9im33ani7aou3bged.github.io" target="_blank" rel="noopener">你的github用户名.github.io</a>”，你将会看到如下主题的blog页面/：<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232645976-26694030.png" alt="enter image description here"></p><h3 id="编写与发布博客"><a class="markdownIt-Anchor" href="#编写与发布博客"></a> 编写与发布博客</h3><p><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232647101-1316912184.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232647960-1011464457.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232649663-1610807056.png" alt="enter image description here"><br>怎么发布到github的博客？还是老样子啊：<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232650445-1801348075.png" alt="enter image description here"><br>接着：<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232650835-1970407975.png" alt="enter image description here"></p><h3 id="faqfrequently-asked-questions"><a class="markdownIt-Anchor" href="#faqfrequently-asked-questions"></a> FAQ（Frequently Asked Questions）</h3><h4 id="关于你博客部署失败的解决办法"><a class="markdownIt-Anchor" href="#关于你博客部署失败的解决办法"></a> 关于你博客部署失败的解决办法：</h4><p>在用Hexo搭建静态博客的时候，deploy时出现如下错误：</p><p>Error: spawn ENOENT</p><pre><code>at errnoException (child_process.js:980:11)</code></pre><p>at Process.ChildProcess._handle.onexit (child_process.js:771:34)</p><p>解决办法？</p><p>添加环境变量：你的安装目录\Git\bin;你的安装目录\Git\libexec\git-core，这样就解决了问题了。</p><p>可惜，使用这个办法引入环境变量，按道理说cmd可以引用到git的命令，但是，你的却居然不行。辣怎么解决呢？也不是没有办法。</p><p>你会发现每次我们执行完 hexo g 后，public目录会被更新一次：<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232651929-622250038.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232653476-883651601.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232654366-1558535892.png" alt="enter image description here"><br>而你执行完 hexo d命令后是将.deploy_git文件夹中的内容推送到github的服务器上：<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232655163-1045105070.png" alt="enter image description here"><br>因此，我们可以在执行完hexo g后自己手动的提交：</p><p>随便在某个目录下：<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232656163-1332164460.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232657101-1637286243.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232657820-843608301.png" alt="enter image description here"><br>然后，你删掉例如我的dantefung.github.io里面的内容，然后：<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232658991-396752852.png" alt="enter image description here"><br>接着，<a href="http://xn--dantefung-4b3or5co7j0w1v.github.io" target="_blank" rel="noopener">双击进入dantefung.github.io</a>(以我的为例)：<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232700351-2121045424.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232701491-1001593310.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232702898-284254383.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232703898-1137096163.png" alt="enter image description here"><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232704366-1903100539.png" alt="enter image description here"><br>然后点OK，等待一会儿，正常情况下都会上传成功~</p><p>现在，试试在浏览器地址栏输入：“<a href="http://xn--github-on9im33ani7aou3bged.github.io" target="_blank" rel="noopener">你的github用户名.github.io</a>”，看看你的博客主页吧~~</p><h4 id="我不会markdown怎么办"><a class="markdownIt-Anchor" href="#我不会markdown怎么办"></a> 我不会Markdown怎么办？</h4><p><a href="http://ibruce.info/2013/11/26/markdown/" target="_blank" rel="noopener">http://ibruce.info/2013/11/26/markdown/</a>  Markdown简明语法</p><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考：</h3><p><a href="http://www.jianshu.com/p/a2023a601ceb" target="_blank" rel="noopener">http://www.jianshu.com/p/a2023a601ceb</a></p><p><a href="http://voidy.net/" target="_blank" rel="noopener">http://voidy.net/</a></p><h3 id="本文转自"><a class="markdownIt-Anchor" href="#本文转自"></a> 本文转自：</h3><p><a href="https://www.cnblogs.com/dantefung/p/d8c48ba8030bcab7cfc364d423186fee.html" target="_blank" rel="noopener">https://www.cnblogs.com/dantefung/p/d8c48ba8030bcab7cfc364d423186fee.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hexogithub搭建个人博客&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hexogithub搭建个人博客&quot;&gt;&lt;/a&gt; Hexo+github搭建个人博客&lt;/h1&gt;
&lt;h3 id=&quot;思维导图总览&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#思维导图总览&quot;&gt;&lt;/a&gt; 思维导图总览：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232604913-1510539894.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://tangbaohua1.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://tangbaohua1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo" scheme="https://tangbaohua1.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
